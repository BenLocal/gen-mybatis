<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.benshi.example.model.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.github.benshi.example.model.User">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="age" jdbcType="INTEGER" property="age"/>
    </resultMap>

    <sql id="Base_Column_List">
        `id`,`name`,`age`
    </sql>

    <select id="selectAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
    </select>

    <select id="selectByFilter" parameterType="com.github.benshi.example.model.User" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
        <where>
            <if test="id != null">
               AND `id` = #{id, jdbcType=BIGINT}
            </if>
            <if test="name != null">
               AND `name` = #{name, jdbcType=VARCHAR}
            </if>
            <if test="age != null">
               AND `age` = #{age, jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <select id="selectOneByFilter" parameterType="com.github.benshi.example.model.User" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
        <where>
            <if test="id != null">
               AND `id` = #{id, jdbcType=BIGINT}
            </if>
            <if test="name != null">
               AND `name` = #{name, jdbcType=VARCHAR}
            </if>
            <if test="age != null">
               AND `age` = #{age, jdbcType=INTEGER}
            </if>
        </where>
        limit 1
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
        where `id` = #{id, jdbcType=BIGINT}
    </select>

    <delete id="deleteById">
        delete from `user`
        where `id` = #{id, jdbcType=BIGINT}
    </delete>

    <update id="update" parameterType="com.github.benshi.example.model.User">
        update `user`
        <set>
            <if test="name != null">
                `name` = #{name, jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                `age` = #{age, jdbcType=INTEGER}
            </if>
        </set>
        where `id` = #{id, jdbcType=BIGINT}
    </update>

    <insert id="insert" parameterType="com.github.benshi.example.model.User">
        insert into `user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                `id`,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="age != null">
                `age`
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id, jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name, jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age, jdbcType=INTEGER}
            </if>
        </trim>
    </insert>

    <select id="count" parameterType="com.github.benshi.example.model.User" resultType="long">
        select count(*)
        from `user`
        <where>
            <if test="id != null">
                AND `id` = #{id, jdbcType=BIGINT}
            </if>
            <if test="name != null">
                AND `name` = #{name, jdbcType=VARCHAR}
            </if>
            <if test="age != null">
                AND `age` = #{age, jdbcType=INTEGER}
            </if>
        </where>
        limit 1
    </select>

    <insert id="batchInsert" parameterType="com.github.benshi.example.model.User">
        insert into `user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            `id`,
            `name`,
            `age`
        </trim>
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id, jdbcType=BIGINT},
            #{item.name, jdbcType=VARCHAR},
            #{item.age, jdbcType=INTEGER})
        </foreach>
    </insert>

    <update id="batchUpdate" parameterType="com.github.benshi.example.model.User">
        insert into `user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            `id`,
            `name`,
            `age`
        </trim>
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.id, jdbcType=BIGINT},
            #{item.name, jdbcType=VARCHAR},
            #{item.age, jdbcType=INTEGER})
        </foreach>
        ON DUPLICATE KEY UPDATE
        `name` = VALUES(`name`),
        `age` = VALUES(`age`)
    </update>
</mapper>